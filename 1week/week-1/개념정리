Component
리액트의 핵심 빌딩 블록
모든 app은 컴포넌트라는 조각으로 구성
= 선언체

DOM 직접 객체를 조작! => 명령형
querySelector 등등

명령형은 어떻게?  =>  목표를 명시 x
선언형은 무엇을?  =>  목적을 중요시 여기는 형태

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

DOM으로 하는게 나쁜게 아니라
코드가 많아질 수록 관리가 어렵다는 점!

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

렌더링이란? => 화면에 그리는 것
리액트에서?
컴포넌트가 현재 !!!!!props와 state의 상태에 기초하여!!!!!!

UI = 음식
Component = 음식을 만드는 주방장
React = 웨이터

1. 렌더링을 일으키는 것 = triggering 
=> UI를 주문하여 주방으로 전달
=> 랜더링이 발생하는 경우
a. 첫 리액트 앱을 실행했을 때
b. state에 변경이 발생했을 때
    @ 컴포넌트 내부 state가 변경될 때
    @ 컴포넌트에 새로운 props가 들어올 때
    @ 상위 부모 컴포넌트에서 위에 두 이유로 렌더링이 발생했을 때

=> 리액트 앱이 실행되고 첫 렌더링이 일어나면 리액트는 컴포넌트의 루트에서 시작하여
아래쪽으로 쭉 훓으며 컴포넌트가 반환하는 JSX 결과물을 DOM 요소에 반영


2. 렌더링을 하는 것 = redering 
=> 주방에서 컴포넌트가 UI를 만들고 준비하는 것

3. 렌더링 결과는 DOM에 커밋한다는 것 = commit = done 
=> 리액트가 준비된 UI를 손님 테이블에 올려놓는 것


4. 컴포넌트 상태에 변화가 생기면 리렌더링이 발생합니다. 
이때 여러 상태가 변경됐다면 리액트는 이를 큐 자료구조에 넣어 순서를 관리합니다.
a. 주방 예시를 다시 들어보면 리렌더링은 음식점 손님이 첫 주문 이후에 갈증이 생겨 추가로 음료를 주문하거나 처음 받은 음식이 마음에 들지 않아 새로운 메뉴를 주문하는 것과 같습니다. 
b. 새로운 UI주문(**리렌더링**)이 일어나면 리액트가 변경된 내용을 주방에 있는 요리사인 컴포넌트에 전달하고 **컴포넌트**는 새로운 변경된 주문을 토대로 새로운 요리(**UI**)를 만듭니다.
c. 새롭게 만들어진 요리(렌러딩 결과)는 리액트에 의해 다시 손님 테이블에 올려집니다(DOM에 반영 - commit phase).
